# I got help from chatGPT in some parts of that makefile: https://chat.openai.com/share/d41febf6-a22b-4d15-a0b1-ab6f9ab8afed

# dir names
GENERATED_DIR := $(CURDIR)/generated
# I needed to include CURDIR in the above line, because automatically generated dependency name (for example inside main.d, absolute/path/to/parser.h) didn't match the rule name for parser.h, which was generated/parser.h in the previous version, this caused for parser.h and parser.c to not be updated as needed.

GRAMMAR_DIR		:= grammar
SRC_DIR				:= src
TEMP_DIR			:= temp
OUTPUT_DIR		:= .
BISON_FILE 		:= $(GRAMMAR_DIR)/bison.y
FLEX_FILE 		:= $(GRAMMAR_DIR)/flex.l


# file names
EXEC_NAME 		:= proj1.exe
BISON_PREFIX 	:= parser
FLEX_PREFIX		:= lexer
PARSER_HEADER := $(GENERATED_DIR)/$(BISON_PREFIX).h
BISON_OUTPUT  := $(GENERATED_DIR)/$(BISON_PREFIX).c
FLEX_OUTPUT		:= $(GENERATED_DIR)/$(FLEX_PREFIX).c

SRC_FILES			:= $(wildcard $(SRC_DIR)/*.c)
SRC_GENERATED	:= $(BISON_OUTPUT) $(FLEX_OUTPUT)
OBJ_GENERATED	:= $(patsubst $(GENERATED_DIR)/%.c, $(TEMP_DIR)/%.o, $(SRC_GENERATED))
OBJ_FILES			:= $(OBJ_GENERATED)
OBJ_FILES			+= $(patsubst $(SRC_DIR)/%.c, $(TEMP_DIR)/%.o, $(SRC_FILES))
DEP_FILES			:= $(patsubst %.o, %.d, $(OBJ_FILES))


# flags
BISON_FLAGS		:= --header=$(PARSER_HEADER) --output=$(BISON_OUTPUT)
FLEX_FLAGS		:= -o $(FLEX_OUTPUT)
# here, fno-common disallows multiple tentative definition of a variable (int a; in a header, header included multiple tr.unit.) see: https://man7.org/linux/man-pages/man1/gcc.1.html#:~:text=defined%20without%20an%20initializer%2C%20known%20as%20tentative
# MMD makes gcc generate dependency files for source codes (besides normal output) based on include directives. see: https://man7.org/linux/man-pages/man1/gcc.1.html#:~:text=%2Dw.-,%2DMM%20Like%20%2DM,-but%20do%20not
# I actually copied this from another project: https://github.com/verilator/verilator/blob/a9664b8d16e1dfdd131a97c9f348ac5078373cdb/include/verilated.mk.in#L78
COMPILE_FLAGS	:= -fno-common -c -O2 -DPARSER_HEADER=\"$(PARSER_HEADER)\" -MMD -I$(CURDIR)
# library conatining some lexer functions I guess.
LINK_FLAGS		:=  -o $(EXEC_NAME) -ll

# run
run: $(EXEC_NAME)
	@echo running executable.
	./$(EXEC_NAME)

# include the dependency files generated by preprocessor. see: https://stackoverflow.com/questions/313778/generate-dependencies-for-a-makefile-for-a-project-in-c-c
-include $(DEP_FILES)

# directory creation
$(GENERATED_DIR):
	mkdir -p $(GENERATED_DIR)

$(TEMP_DIR):
	mkdir -p $(TEMP_DIR)



# generate code with bison
$(PARSER_HEADER) $(BISON_OUTPUT): $(BISON_FILE) $(GENERATED_DIR)
	@echo generating parser code with bison
	bison $(BISON_FLAGS) $(BISON_FILE)

# generate code with flex. (the flex file uses header file generated by bison)
# possibly other headers used by lex file will be in the dependencies here
$(FLEX_OUTPUT): $(PARSER_HEADER) $(FLEX_FILE) $(GENERATED_DIR)
	@echo generating lexer code with flex
	flex $(FLEX_FLAGS) $(FLEX_FILE)


# compile c files
$(TEMP_DIR)/%.o: $(GENERATED_DIR)/%.c $(TEMP_DIR)
	@echo compiling generated c file
	gcc $(COMPILE_FLAGS) $< -o $@

$(TEMP_DIR)/%.o: $(SRC_DIR)/%.c
	@echo compiling user c file
	gcc $(COMPILE_FLAGS) $< -o $@

# rules for dependency files. (not needed but just to make it easier for make to find them out.)
$(TEMP_DIR)/%.d: $(GENERATED_DIR)/%.c
	@echo trying to generate dependency file for generated c file\'s object
	gcc $(COMPILE_FLAGS) $< -o $(patsubst %.d, %.o, $@)

$(TEMP_DIR)/%.d: $(SRC_DIR)/%.c
	@echo trying to generate dependency file for user c file\'s object
	@echo dont care if error related to included file being not there.
	gcc $(COMPILE_FLAGS) $< -o $(patsubst %.d, %.o, $@)


# link c files into executable
$(EXEC_NAME): $(OBJ_FILES)
	@echo linking into an executable
	gcc $(OBJ_FILES) $(LINK_FLAGS)

# clean
clean:
	@echo cleaning
	rm -rf generated temp

debug:
	@echo src files: $(SRC_FILES)
	@echo obj files: $(OBJ_FILES)
	@echo src generated: $(SRC_GENERATED)
	@echo obj generated: $(OBJ_GENERATED)
	@echo bison flags: $(BISON_FLAGS)
	@echo dep files: $(DEP_FILES)

parser: $(PARSER_HEADER) $(BISON_OUTPUT)

lexer: $(FLEX_OUTPUT)

compile: $(OBJ_FILES)